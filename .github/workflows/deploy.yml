name: Deploy to Hetzner Server

on:
  push:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm install

    - name: Build application
      run: npm run build:prod

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Add server to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

    - name: Create deployment archive
      run: |
        tar -czf deploy.tar.gz \
         --exclude=node_modules \
         --exclude=.git \
         --exclude=.github \
         --exclude=.angular \
         --exclude=.vscode \
         --exclude=*.md \
         dist/ \
         tsconfig*.json \
         src/ \
         server.ts \
         package.json \
         package-lock.json \
         angular.json \
         .dockerignore \
         Dockerfile \
         docker-compose.yml \
         nginx.conf

    - name: Upload files to server
      run: |
        scp -o StrictHostKeyChecking=no deploy.tar.gz ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/hsduarte-deploy.tar.gz

    - name: Deploy on server
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          set -e
          
          # Colors for output
          GREEN='\033[0;32m'
          YELLOW='\033[1;33m'
          NC='\033[0m'
          
          echo -e "${GREEN}[INFO]${NC} Starting deployment..."
          
          # Create backup of current deployment
          if [ -d "/opt/hsduarte" ]; then
            echo -e "${YELLOW}[INFO]${NC} Creating backup..."
            sudo cp -r /opt/hsduarte /opt/hsduarte.backup.$(date +%Y%m%d_%H%M%S)
          fi
          
          # Create application directory
          sudo mkdir -p /opt/hsduarte
          cd /opt/hsduarte
          
          # Extract new files
          echo -e "${GREEN}[INFO]${NC} Extracting files..."
          sudo tar -xzf /tmp/hsduarte-deploy.tar.gz
          
          # Stop existing containers
          echo -e "${YELLOW}[INFO]${NC} Stopping existing services..."
          if [ -f docker-compose.yml ]; then
            sudo docker-compose down || true
          fi
          
          # Capture currently running image (for rollback)
          PREV_IMAGE_ID=$(sudo docker inspect -f '{{.Image}}' hsduarte-website 2>/dev/null || true)
          if [ -n "$PREV_IMAGE_ID" ]; then
            echo -e "${YELLOW}[INFO]${NC} Previous image: $PREV_IMAGE_ID"
            sudo mkdir -p /opt/hsduarte/backup-images
            sudo docker image save -o /opt/hsduarte/backup-images/prev-$(date +%Y%m%d_%H%M%S).tar $PREV_IMAGE_ID || true
          fi

          # Build and start new containers
          echo -e "${GREEN}[INFO]${NC} Building and starting services..."
          sudo docker-compose build --no-cache --pull
          sudo docker-compose up -d
          
          # Wait for services to be ready and check health endpoint
          echo -e "${GREEN}[INFO]${NC} Waiting for services to start..."
          for i in {1..10}; do
            if curl -f -s http://localhost:4000/_health > /dev/null; then
              HEALTH_OK=1
              break
            fi
            sleep 3
          done

          if [ "${HEALTH_OK:-0}" -eq 1 ]; then
            echo -e "${GREEN}[SUCCESS]${NC} Application is healthy!"
          else
            echo -e "${RED}[ERROR]${NC} Health check failed. Rolling back..."
            # Stop new deployment
            sudo docker-compose down || true
            # Restore previous image if available
            if [ -n "$PREV_IMAGE_ID" ]; then
              echo -e "${YELLOW}[INFO]${NC} Restoring previous container..."
              sudo docker network create hsduarte_hsduarte-network || true
              sudo docker rm -f hsduarte-website || true
              sudo docker run -d --name hsduarte-website \
                --restart unless-stopped \
                --network hsduarte_hsduarte-network \
                -p 4000:4000 $PREV_IMAGE_ID
              # Verify previous comes back
              sleep 5
              if curl -f -s http://localhost:4000/_health > /dev/null; then
                echo -e "${GREEN}[SUCCESS]${NC} Rollback succeeded."
              else
                echo -e "${RED}[ERROR]${NC} Rollback failed. Manual intervention required."
              fi
            else
              echo -e "${YELLOW}[WARN]${NC} No previous image to roll back to."
            fi
            exit 1
          fi
          
          # Clean up
          rm -f /tmp/hsduarte-deploy.tar.gz
          sudo docker system prune -f
          
          # Keep only last 3 backups
          sudo find /opt -name "hsduarte.backup.*" -type d | sort | head -n -3 | sudo xargs rm -rf
          
          echo -e "${GREEN}[SUCCESS]${NC} Deployment completed successfully!"
        EOF

    - name: Verify deployment
      run: |
        echo "üöÄ Deployment completed!"
        echo "üåê Site should be available at: https://${{ secrets.SERVER_HOST }}"
        
        # Optional: Send notification
        if [ "${{ secrets.DISCORD_WEBHOOK }}" != "" ]; then
          curl -H "Content-Type: application/json" \
            -d '{"content": "‚úÖ hsduarte.com deployed successfully to Hetzner server!"}' \
            "${{ secrets.DISCORD_WEBHOOK }}" || true
        fi
