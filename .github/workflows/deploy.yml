name: Deploy to Hetzner Server

on:
  push:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm install

    - name: Build application
      run: npm run build:prod

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Add server to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

    - name: Create deployment archive
      run: |
        tar -czf deploy.tar.gz \
         --exclude=node_modules \
         --exclude=.git \
         --exclude=.github \
         --exclude=.angular \
         --exclude=.vscode \
         --exclude=*.md \
         dist/ \
         tsconfig*.json \
         src/ \
         server.ts \
         package.json \
         package-lock.json \
         angular.json \
         .dockerignore \
         Dockerfile \
         docker-compose.yml \
         nginx.conf

    - name: Upload files to server
      run: |
        scp -o StrictHostKeyChecking=no deploy.tar.gz ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/hsduarte-deploy.tar.gz

    - name: Deploy on server (blue/green)
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          set -e
          
          # Colors for output
          GREEN='\033[0;32m'
          YELLOW='\033[1;33m'
          NC='\033[0m'
          
          echo -e "${GREEN}[INFO]${NC} Starting deployment..."
          
          # Create backup of current deployment
          if [ -d "/opt/hsduarte" ]; then
            echo -e "${YELLOW}[INFO]${NC} Creating backup..."
            sudo cp -r /opt/hsduarte /opt/hsduarte.backup.$(date +%Y%m%d_%H%M%S)
          fi
          
          # Create application directory
          sudo mkdir -p /opt/hsduarte
          cd /opt/hsduarte
          
          # Extract new files
          echo -e "${GREEN}[INFO]${NC} Extracting files..."
          sudo tar -xzf /tmp/hsduarte-deploy.tar.gz
          
          # Do not stop current instance; we will start a new one on alternate port for zero downtime
          
          # Determine current upstream port from nginx
          CUR_PORT=$(grep -RhoE "proxy_pass http://127\.0\.0\.1:[0-9]+" /etc/nginx/sites-enabled /etc/nginx/sites-available 2>/dev/null | head -n1 | sed -E 's/.*:([0-9]+)/\1/' || echo 4000)
          if [ -z "$CUR_PORT" ]; then CUR_PORT=4000; fi
          if [ "$CUR_PORT" = "4000" ]; then NEXT_PORT=4001; else NEXT_PORT=4000; fi
          echo -e "${GREEN}[INFO]${NC} Current port: $CUR_PORT, Next port: $NEXT_PORT"

          # Build and start new deployment on NEXT_PORT using separate project name
          echo -e "${GREEN}[INFO]${NC} Building image..."
          APP_PORT=$NEXT_PORT COMPOSE_PROJECT_NAME=hsduarte-$NEXT_PORT sudo -E docker-compose build
          
          # Ensure NEXT_PORT is free (clean up any old instance on that port)
          echo -e "${YELLOW}[INFO]${NC} Ensuring port $NEXT_PORT is free..."
          APP_PORT=$NEXT_PORT COMPOSE_PROJECT_NAME=hsduarte-$NEXT_PORT sudo -E docker-compose down || true
          # Also remove any container explicitly bound to NEXT_PORT
          CID=$(sudo docker ps -q --filter "publish=$NEXT_PORT")
          if [ -n "$CID" ]; then
            echo -e "${YELLOW}[INFO]${NC} Stopping container $CID on port $NEXT_PORT..."
            sudo docker rm -f $CID || true
          fi
          echo -e "${GREEN}[INFO]${NC} Starting new instance on port $NEXT_PORT..."
          APP_PORT=$NEXT_PORT COMPOSE_PROJECT_NAME=hsduarte-$NEXT_PORT sudo -E docker-compose up -d

          # Health check new instance
          echo -e "${GREEN}[INFO]${NC} Checking health on :$NEXT_PORT..."
          for i in {1..15}; do
            if curl -f -s http://localhost:$NEXT_PORT/_health > /dev/null; then
              HEALTH_OK=1
              break
            fi
            sleep 2
          done

          if [ "${HEALTH_OK:-0}" -ne 1 ]; then
            echo -e "${RED}[ERROR]${NC} New instance unhealthy. Keeping current."
            APP_PORT=$NEXT_PORT COMPOSE_PROJECT_NAME=hsduarte-$NEXT_PORT sudo -E docker-compose logs --no-color || true
            APP_PORT=$NEXT_PORT COMPOSE_PROJECT_NAME=hsduarte-$NEXT_PORT sudo -E docker-compose down || true
            exit 1
          fi

          # Switch nginx upstream to NEXT_PORT
          echo -e "${GREEN}[INFO]${NC} Switching nginx to port $NEXT_PORT..."
          sudo cp /etc/nginx/sites-available/hsduarte.com /etc/nginx/sites-available/hsduarte.com.bak.$(date +%Y%m%d_%H%M%S)
          sudo sed -i "s#proxy_pass http://127.0.0.1:$CUR_PORT#proxy_pass http://127.0.0.1:$NEXT_PORT#g" /etc/nginx/sites-available/hsduarte.com
          sudo nginx -t && sudo systemctl reload nginx
          echo -e "${GREEN}[INFO]${NC} Nginx reloaded. New upstream active."

          # Stop old instance
          echo -e "${GREEN}[INFO]${NC} Stopping old instance on port $CUR_PORT..."
          APP_PORT=$CUR_PORT COMPOSE_PROJECT_NAME=hsduarte-$CUR_PORT sudo -E docker-compose down || true
          
          # Clean up
          rm -f /tmp/hsduarte-deploy.tar.gz
          sudo docker system prune -f
          
          # Keep only last 3 backups
          sudo find /opt -name "hsduarte.backup.*" -type d | sort | head -n -3 | sudo xargs rm -rf
          
          echo -e "${GREEN}[SUCCESS]${NC} Deployment completed successfully!"
        EOF

    - name: Notify (Discord)
      if: always()
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        REPO: ${{ github.repository }}
        BRANCH: ${{ github.ref_name }}
        SHA: ${{ github.sha }}
        ACTOR: ${{ github.actor }}
        RUN_ID: ${{ github.run_id }}
        SERVER_URL: ${{ github.server_url }}
      run: |
        # Ensure jq is available for robust JSON building
        command -v jq >/dev/null 2>&1 || { sudo apt-get update -y && sudo apt-get install -y jq; }

        if [ -z "$DISCORD_WEBHOOK" ]; then
          echo "No Discord webhook configured; skipping notification."
          exit 0
        fi

        STATUS="${{ job.status }}"
        if [ "$STATUS" = "Success" ] || [ "$STATUS" = "success" ]; then
          COLOR=3066993   # green
          TITLE="✅ Deploy Succeeded"
          DESC="hsduarte.com is live"
        else
          COLOR=15158332  # red
          TITLE="❌ Deploy Failed"
          DESC="Investigate workflow logs"
        fi

        SHORT_SHA=${SHA::7}
        TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        END_TS=$(date -u +%s)
        START_TS=${DEPLOY_START:-$END_TS}
        DUR=$((END_TS - START_TS))
        DUR_MIN=$((DUR / 60))
        DUR_SEC=$((DUR % 60))
        DURATION="${DUR_MIN}m ${DUR_SEC}s"
        RUN_URL="$SERVER_URL/$REPO/actions/runs/$RUN_ID"

        PAYLOAD=$(jq -nc \
          --arg title "$TITLE" \
          --arg desc "$DESC" \
          --arg timestamp "$TIMESTAMP" \
          --arg repo "$REPO" \
          --arg branch "$BRANCH" \
          --arg commit "$SHORT_SHA" \
          --arg actor "$ACTOR" \
          --arg url "https://hsduarte.com" \
          --arg duration "$DURATION" \
          --arg run_url "$RUN_URL" \
          --argjson color $COLOR \
          '{embeds: [{title: $title, description: $desc, color: $color, timestamp: $timestamp, fields: [
            {name: "Repository", value: $repo, inline: true},
            {name: "Branch", value: $branch, inline: true},
            {name: "Commit", value: $commit, inline: true},
            {name: "Actor", value: $actor, inline: true},
            {name: "URL", value: $url, inline: true},
            {name: "Duration", value: $duration, inline: true},
            {name: "Workflow", value: $run_url, inline: false}
          ]}]}')
        curl -sS -H "Content-Type: application/json" -d "$PAYLOAD" "$DISCORD_WEBHOOK" || true
